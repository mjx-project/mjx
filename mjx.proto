syntax = "proto3";

package mjxproto;

service Agent {
  rpc TakeAction (Observation) returns (Action) {}
}

enum ActionType {
  // After someone's draw
  ACTION_TYPE_DISCARD_FROM_HAND = 0;
  ACTION_TYPE_DISCARD_DRAWN_TILE = 1;  // ツモ切り, Tsumogiri
  ACTION_TYPE_RIICHI = 2;
  ACTION_TYPE_CLOSED_KAN = 3;  // 暗槓
  ACTION_TYPE_ADDED_KAN = 4;  // 加槓
  ACTION_TYPE_TSUMO = 5;
  ACTION_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;  // 九種九牌
  // After someone's discard
  ACTION_TYPE_CHI = 7;
  ACTION_TYPE_PON = 8;
  ACTION_TYPE_OPEN_KAN = 9;  // 明槓
  ACTION_TYPE_RON = 10;
  ACTION_TYPE_NO = 11;  // Ignore chi, pon, open kan, and ron options
}

enum EventType {
  // Publicly observable actions
  EVENT_TYPE_DISCARD_FROM_HAND = 0;
  EVENT_TYPE_DISCARD_DRAWN_TILE = 1;
  EVENT_TYPE_RIICHI = 2;
  EVENT_TYPE_CLOSED_KAN = 3;
  EVENT_TYPE_ADDED_KAN = 4;
  EVENT_TYPE_TSUMO = 5;
  EVENT_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;
  EVENT_TYPE_CHI = 7;
  EVENT_TYPE_PON = 8;
  EVENT_TYPE_OPEN_KAN = 9;
  EVENT_TYPE_RON = 10;
  // State transitions made by environment. There is no decision making by players.  
  // 11 is skipped for the consistency to ActionType 
  EVENT_TYPE_DRAW = 12; 
  EVENT_TYPE_RIICHI_SCORE_CHANGE = 13; 
  EVENT_TYPE_NEW_DORA = 14; 
  EVENT_TYPE_ABORTIVE_DRAW_FOUR_RIICHIS = 15;  // 四家立直 
  EVENT_TYPE_ABORTIVE_DRAW_THREE_RONS = 16;  // 三家和了 
  EVENT_TYPE_ABORTIVE_DRAW_FOUR_KANS = 17;  // 四槓散了 
  EVENT_TYPE_ABORTIVE_DRAW_FOUR_WINDS = 18;  // 四風連打 
  EVENT_TYPE_EXHAUSTIVE_DRAW_NORMAL = 19;  // 通常流局 
  EVENT_TYPE_EXHAUSTIVE_DRAW_NAGASHI_MANGAN = 20;  // 流し満貫 
  // Round end indicator
  EVENT_TYPE_ROUND_END = 21; // Necessary to handle double ron
}

message Action {
  //                          discard   open
  //  DISCARD_FROM_HAND           Yes     No
  //  DISCARD_DRAWN_TILE          Yes     No
  //  RIICHI                       No     No
  //  CLOSED_KAN                   No    Yes
  //  ADDED_KAN                    No    Yes
  //  TSUMO                        No     No
  //  ABORTIVE_DRAW_NINE_TERMINALS No     No
  //  CHI                          No    Yes
  //  PON                          No    Yes
  //  OPEN_KAN                     No    Yes
  //  RON                          No     No
  //  NO                           No     No
  int32 game_id = 1;
  int32 who = 2;  // 0: the first dealer in a game  (0: 起家, ..., 3: ラス親)
  ActionType type = 3;
  int32 discard = 4;
  int32 open = 5;
}

message Event {
  // Publicly observable event, which include 
  // 
  //   1. publicly observable and actually realized actions taken by all layers 
  //   2. publicly observable state transitions made by envionment
  // 
  // Note that "NO" action is **NOT** collected as event since it's not publicly observable.
  // Also, "Chi" prevented by other player's "Pon/Ron" is also **NOT** collected in event_history.
  // Drawn tile does not use tile entry because it's not publicly observable. 
  // Only the fact that the player drew something is collected.
  //
  // Table. Is who/tile/open entry set?
  //                                    who    tile    open
  //  0. DISCARD_FROM_HAND              Yes     Yes      No
  //  1. DISCARD_DRAWN_TILE             Yes     Yes      No
  //  2. RIICHI                         Yes      No      No
  //  3. CLOSED_KAN                     Yes      No     Yes
  //  4. ADDED_KAN                      Yes      No     Yes
  //  5. TSUMO                          Yes     Yes      No
  //  6. ABORTIVE_DRAW_NINE_TERMINALS   Yes      No      No
  //  7. CHI                            Yes      No     Yes
  //  8. PON                            Yes      No     Yes
  //  9. OPEN_KAN                       Yes      No     Yes
  // 10. RON                            Yes     Yes      No
  // 12. DRAW                           Yes      No      No
  // 13. RIICHI_SCORE_CHANGE            Yes      No      No
  // 14. NEW_DORA                        No     Yes      No
  // 16. ABORTIVE_DRAW_FOUR_RIICHIS      No      No      No
  // 17. ABORTIVE_DRAW_THREE_RONS        NO      NO      NO
  // 18. ABORTIVE_DRAW_FOUR_KANS         No      No      No
  // 19. ABORTIVE_DRAW_FOUR_WINDS        No      No      No
  // 15. EXHAUSTIVE_DRAW_NORMAL          No      No      No
  // 20. EXHAUSTIVE_DRAW_NAGASHI_MANGAN  No      No      No
  // 21. ROUND_END                       No      No      No
  EventType type = 1;
  int32 who = 2;  // 0: the first dealer in a game  (0: 起家, ..., 3: ラス親)
  int32 tile = 3;
  int32 open = 4;
}

message Observation {
  int32 who = 1;  // 0: the first dealer in a game  (0: 起家, ..., 3: ラス親)
  PublicObservation public_observation = 2;
  PrivateObservation private_observation = 3;
  ObservationUtils utils = 4;
}

message State {
  HiddenState hidden_state = 1;  // Information no one can access
  PublicObservation public_observation = 2;  // Information any player can observe
  repeated PrivateObservation private_observations = 3;  // Information only the corresponding player can access. size is 4.
  StateUtils utils = 4;
}

message PublicObservation {
  Score init_score = 1;
  int32 init_dora_indicator = 2;
  repeated Event event_history = 3;
  PublicObservationUtils utils = 4;
}

message PrivateObservation {
  int32 who = 1;  // 0: the first dealer in a game  (0: 起家, ..., 3: ラス親)
  Hand init_hand = 2;
  repeated int32 draw_history = 3;
  PrivateObservationUtils utils = 4;
}

message HiddenState {
  // 136 tiles, indexed [0, ..., 135]
  // - [0, ..., 51] (13*4=52): initial hands (depend on round info)
  // - [52, ..., 121] (70): draws
  // - [122, 124, 126, 128] Kan dora indicators 3, 2, 1, 0
  // - [123, 125, 127, 129] Kan ura Dora indicators 3, 2, 1, 0
  // - [130] Dora indicator
  // - [131] Ura dora indicator
  // - [132, ..., 135]  Kan draw 2, 3, 0, 1
  repeated int32 wall = 1;
  HiddenStateUtils utils = 2;
}

message Score {
  // At every timestep, sum(score.tens) + score.riichi * 1000 == 100000 holds.
  int32 round = 1;
  int32 honba = 2;
  int32 riichi = 3;
  repeated int32 tens = 4;  // size is 4
}

message Hand {
  int32 who = 1;  // 0: the first dealer in a game  (0: 起家, ..., 3: ラス親)
  repeated int32 closed_tiles = 2;
  repeated int32 opens = 3;
}

// Utilities: information which is not necessary (but may be useful) to represent situations

message ObservationUtils {}

message StateUtils {}

message PublicObservationUtils {
  uint64 game_id = 1;
  repeated string player_ids = 2;  // size is 4
  Score curr_score = 3;
  repeated int32 curr_dora_indicators = 4;
  repeated River rivers = 5;  // size is 4
  repeated bool is_declared_riichis = 6;  // size is 4
  RoundTerminal round_terminal = 7;
}

message PrivateObservationUtils {
  Hand curr_hand = 1;
  repeated Action legal_actions = 2;
}

message HiddenStateUtils {
  uint64 game_seed = 1;
  repeated int32 curr_ura_dora_indicators = 2;
}

message River {
  repeated int32 tiles = 1;
}

message RoundTerminal {
  Score final_score = 1;
  repeated Win wins = 2;   // Empty if no one wins
  Draw draw = 3;  // draw.tenpai_hands is empty if any winner exists
  bool is_game_over = 4;
}

message Win {
  int32 who = 1;  // 0: the first dealer in a game  (0: 起家, ..., 3: ラス親)
  int32 from_who = 2;
  Hand hand = 3;
  int32 win_tile = 4;
  int32 fu = 5;
  repeated int32 fans = 6;  // TODO: check definitions
  repeated int32 yakus = 7;  // TODO: check definitions
  repeated int32 yakumans = 8;
  int32 ten = 9;  // TODO: check definitions
  repeated int32 ten_changes = 10;  // Required only for Tenhou mjlog.  TODO: check definition. remove
}

message Draw {
  repeated Hand tenpai_hands = 1;
  repeated int32 ten_changes = 2;  // Required only for Tenhou mjlog.  TODO: check definition. remove
}

/*
 *  State: state
 *  |- HiddenState: hidden_state
 *  |   |- [int32]: wall
 *  |   |- HiddenStateUtils: utils
 *  |       |- uint64: game_seed
 *  |       |- [int32]: curr_ura_dora_indicators
 *  |
 *  |- PublicObservation: public_observation
 *  |   |- Score: init_score
 *  |   |- int32: init_dora_indicator
 *  |   |- [Event]: event_history
 *  |   |- PublicObservationUtils: utils
 *  |       |- uint64: game_id
 *  |       |- [string]: player_ids
 *  |       |- Score: curr_score
 *  |       |- [int32]: curr_dora_indicators
 *  |       |- [River]: rivers
 *  |           |- [int32] tiles
 *  |       |- RoundTerminal: round_terminal
 *  |           |- Score: final_score
 *  |           |- [Win] wins
 *  |           |- Draw draw
 *  |           |   |- [Hand]: tenpai_hands
 *  |           |   |- [int32]: ten_changes
 *  |           |- bool: is_game_over
 *  |
 *  |- [PrivateObservation] private_observations
 *  |   |- int32: who
 *  |   |- Hand: init_hand
 *  |   |- [int32]: draw_history
 *  |   |- PrivateObservationUtils: utils
 *  |       |- Hand: curr_hand
 *  |       |- [Action]: legal_actions
 *  |- [StateUtils] utils
 *  
 *  
 *  Observation: observation
 *  |- int32: who
 *  |- PublicObservation: public_observation
 *  |- PrivateObservation: private_observations
 *  |- ObservationUtils: utils
 */
