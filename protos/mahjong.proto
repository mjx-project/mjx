syntax = "proto3";

package mjproto;

service Agent {
  rpc TakeAction (Observation) returns (Action) {}
}

enum Wind {
  WIND_EAST = 0;
  WIND_SOUTH = 1;
  WIND_WEST = 2;
  WIND_NORTH = 3;
}

enum AbsolutePos {
  ABSOLUTE_POS_INIT_EAST = 0;  // 起家
  ABSOLUTE_POS_INIT_SOUTH = 1;
  ABSOLUTE_POS_INIT_WEST = 2;
  ABSOLUTE_POS_INIT_NORTH = 3;  // ラス親
}

enum RelativePos {
  RELATIVE_POS_SELF = 0;
  RELATIVE_POS_RIGHT = 1;  // 下家
  RELATIVE_POS_MID = 2;    // 対面
  RELATIVE_POS_LEFT = 3;   // 上家
}

enum ActionType {
  ACTION_TYPE_DISCARD = 0;
  ACTION_TYPE_RIICHI = 1;
  ACTION_TYPE_TSUMO = 2;
  ACTION_TYPE_RON = 3;
  ACTION_TYPE_CHI = 4;
  ACTION_TYPE_PON = 5;
  ACTION_TYPE_KAN_CLOSED = 6;
  ACTION_TYPE_KAN_OPENED = 7;
  ACTION_TYPE_KAN_ADDED = 8;
  ACTION_TYPE_KYUSYU = 9;
}

enum EventType {
  // Only for observation event history
  EVENT_TYPE_DRAW = 0;
  EVENT_TYPE_DISCARD_FROM_HAND = 1;
  EVENT_TYPE_DISCARD_DRAWN_TILE = 2;  // ツモ切り, Tsumogiri
  // Common
  EVENT_TYPE_RIICHI = 3;
  EVENT_TYPE_TSUMO = 4;
  EVENT_TYPE_RON = 5;
  EVENT_TYPE_CHI = 6;
  EVENT_TYPE_PON = 7;
  EVENT_TYPE_KAN_CLOSED = 8;
  EVENT_TYPE_KAN_OPENED = 9;
  EVENT_TYPE_KAN_ADDED = 10;
  EVENT_TYPE_NEW_DORA = 11;
  EVENT_TYPE_RIICHI_SCORE_CHANGE = 12;
}

enum NoWinnerEndType {  // 流局
  NO_WINNER_END_TYPE_NORMAL = 0;
  NO_WINNER_END_TYPE_KYUUSYU = 1; // 九種九牌  // TODO(sotetsuk): rename
  NO_WINNER_END_TYPE_FOUR_RIICHI = 2;  // 四家立直
  NO_WINNER_END_TYPE_THREE_RONS = 3;  // 三家和了
  NO_WINNER_END_TYPE_FOUR_KANS = 4;  // 四槓散了
  NO_WINNER_END_TYPE_FOUR_WINDS = 5;  // 四風連打
  NO_WINNER_END_TYPE_NM = 6;  // 流し満貫  # TODO(sotetsuk): rename
}

message Score {
  uint32 round = 1;
  uint32 honba = 2;
  uint32 riichi = 3;
  repeated uint32 ten = 4;
}

message Event {
  AbsolutePos who = 1;
  EventType type = 2;
  uint32 tile = 3;
  uint32 open = 4;
}

message EventHistory {
  repeated Event events = 2;
}

message PrivateInfo {
  AbsolutePos who = 1;
  repeated uint32 init_hand = 2;
  repeated uint32 draws = 3;
}

message PossibleAction {
  uint32 type = 1;
  uint32 open = 2;
  repeated uint32 discard_candidates = 3;
}

// Similar to Tenhou's mjlog format. Initial hand and action sequence are sent to each player.
// However, different from Tenhou, each observation request is stateless.
// Each request has enough information to make decisions.
message Observation {
  repeated string player_ids = 1;
  Score init_score = 2;  // public info
  repeated uint32 doras = 3;
  EventHistory event_history = 4;  // public info
  AbsolutePos who = 5;
  PrivateInfo private_info = 6;
  repeated PossibleAction possible_actions = 7;
}

message Win {  // only for Tenhou visualization
  AbsolutePos who = 1;
  AbsolutePos from_who = 2;
  repeated uint32 closed_tiles = 3;
  repeated uint32 opens = 4;
  uint32 win_tile = 5;
  uint32 fu = 6;
  uint32 ten = 7;
  repeated int32 ten_changes = 8;  // Required for Tenhou mjlog.
  repeated uint32 yakus = 9;
  repeated uint32 fans = 10;
  repeated uint32 yakumans = 11;
}

message NoWinnerEnd {  // only for Tenhou visualization
  repeated TenpaiHand tenpais = 1;
  repeated int32 ten_changes = 2;  // Required for Tenhou mjlog.
  NoWinnerEndType type = 3;  // Following Tenhou mjlog format. 0, normal. 九種九牌, 四家立直, 三家和了, 四槓散了, 四風連打, 流し満貫
}

message TenpaiHand {  // only for Tenhou visualization
  AbsolutePos who = 1;
  repeated uint32 closed_tiles = 2;
}

message StateEndInfo {  // only for Tenhou visualization
  repeated Win wins = 2;
  NoWinnerEnd no_winner_end = 3;  // Empty if someone wins
  bool is_game_over = 4;
}

message State {  // For Tenhou visualization and unit test
  // public info
  repeated string player_ids = 1;
  Score init_score = 2;  // Required for Tenhou mjlog.
  repeated uint32 doras = 3;
  EventHistory event_history = 4;
  // private info
  repeated uint32 wall = 5;
  repeated uint32 ura_doras = 6;
  repeated PrivateInfo private_infos = 7;
  // game end info
  StateEndInfo end_info = 8;
}

message Action {  // corresponds to mj::Action in cpp
  uint32 game_id = 1;
  AbsolutePos who = 2;
  ActionType type = 3;
  bool yes = 4; // riichi_and_discard, tsumo, ron and kyusyu (九種九牌)
  uint32 discard = 5;  // discard, riichi_and_discard, chi and pon
  uint32 open = 6;  // chi, pon, kan_opened, kan_closed, and kan_added
}
