@startuml

set namespaceSeparator ::

class mjproto::Score <<(D,yellow) Data>> {
  + round
  + honba 
  + riichi 
  + ten 
}

class mjproto::Event <<(D,yellow) Data>> {
  + who
  + type 
  + tile
  + open
}

class mjproto::EventHistory <<(D,yellow) Data>> {
  + events
}

class mjproto::InitHand <<(D,yellow) Data>> {
  + tiles
}

class mjproto::PossibleAction <<(D,yellow) Data>> {
  + type
  + open 
  + discard_candidates
}

class mjproto::State <<(D,yellow) Data>> {
  + game_id
  + player_ids
  + init_score
  + doras
  + init_hands
  + event_history
  + wall
  + ura_dora
  + end_info
} 

class mjproto::StateEndInfo <<(D,yellow) Data>> {
  + end_score
  + wins
  + tenpais 
  + no_winner_end_type
  + is_game_over
}

class mjproto::Observation <<(D,yellow) Data>> {
  + game_id
  + player_ids
  + init_score
  + doras
  + who
  + init_hand 
  + event_history
  + possible_actions
}

class mjproto::Action <<(D,yellow) Data>> { 
  + game_id 
  + who
  + type
  + yes
  + discard
  + open
}

mjproto::Observation *-- mjproto::Score
mjproto::Observation *-- mjproto::EventHistory
mjproto::Observation *-- mjproto::InitHand
mjproto::Observation "1" *-- "1..*" mjproto::PossibleAction

mjproto::State *-- mjproto::Score
mjproto::State *-- mjproto::EventHistory
mjproto::State "1" *-- "4" mjproto::InitHand
mjproto::State *-- mjproto::StateEndInfo

mjproto::EventHistory "1" *-- "1..*" mjproto::Event


class mj::Environment {
    - agents: AgentClient
    - state: State
    + Run(): void
    + RunOneGame(): void
    + RunOneRound(): void
}

class mj::YakuEvaluator <<(S,orange) Static>> {
    + {static} Has(): bool
    + {static} Eval(): mj::WinningScore
}

class mj::WinningHandCache <<(S,orchid) Singleton>> {
    + Has(): bool
}

class mj::WinningStateInfo <<(D,yellow) Data>> {
  + dora
  + tenhou
  + haitei
}

class mj::WinningScore <<(D,yellow) Data>> {
    + yakuman: map<mj::Yaku, int>
    + yaku: map<mj::Yaku, bool>
    + fu: optional<int>
}

class mj::WinningInfo <<(D,yellow) Data>> {
    + opens: vector<Open>
    + closed_tiles: unordered_set<mj::Tile, HashTile> 
    + last_tile_added: std::optional<Tile> 
    + stage: HandStage 
    + under_riichi bool 
    + closed_tile_types: TileTypeCount 
    + all_tile_types: TileTypeCount 
    + is_menzen: bool
    + Ron(): WinningInfo&
    + Discard(): WinningInfor&
    + Tsumo(): WinningInfo&
}

class mj::State {
    - score: Score
    - stage: RoundStage
    - dealer: AbsolutePos
    - drawer: AbsolutePos
    - wall: Wall
    - private_event_history: EventHistory
    - public_event_history: EventHistory
    - players: array<Player, 4>
    - init_hand : mjproto:: InitHand
    + InitRound(): void
    + CreateObservation(): pair<AbsolutePos, Observation>
    + UpdateState(Action): void
    + IsRoundOver(): bool
    - PossibleActions(): vector<Action>
    - UpdateStateByDraw(): mj::Tile
    - UpdateStateByAction(): void
    - UpdateStateByActionCandidates(): void
}

class mj::Player {
    - hand : Hand
    - river : River
    + PossibleDiscards()
    + PossibleDiscardsAfterRiichi()
    + PossibleOpensAfterOthersDiscard()
    + PossibleOpensAfterDraw()
    + CanRon()
    + IsCompleted()
    + CanRiichi()
    + Draw()
    + Riichi()
    + ApplyOpen()
    + Ron()
    + RonAfterOthersKan()
    + Tsumo()
    + Discard()
}

class mj::Observation <<(D,yellow) Data>> {
    - observation mjproto::Observation
}
note left
mjproto::InitHand refers to State
mjproto::EventHistory refers to EventHistory
end note

class mj::EventHistory <<(D,yellow) Data>> {
    - event_history mjproto::EventHistory
}

abstract class mj::AgentClient {
    + TakeAction(): Action
}

class mj::AgentClientMock {

}


abstract class mj::AgentServer {
    + RunServer(): void
}

class mj::AgentServerMock{

}

class mj::Score <<(D,yellow) Data>> {
    - score mjproto::Score
}

class mj::Wall {
    - tiles: vector<Tile>
    + <<get>> initial_hands(): array<Hand, 4>
    + <<get>> doras(): vector<Tile>
    + <<get>> ura_doras(): vector<Tile>
    + Draw(): Tile
    + KanDraw(): Tile
    + AddKanDora()
    + HasDrawLeft(): bool
}

class mj::River {

} 

class mj::Action <<(D,yellow) Data>> {
    - action_response mjproto::Action
}

class mj::Hand {
    - stage
    - last_tile_added
    - closed_tiles
    - opens
    - undiscardable_tiles
    - under_riichi
    + PossibleDiscards()
    + PossibleDiscardsAfterRiichi()
    + PossibleOpensAfterOthersDiscard()
    + PossibleOpensAfterDraw()
    + CanRon()
    + IsCompleted()
    + CanRiichi()
    + Draw()
    + Riichi()
    + ApplyOpen()
    + Ron()
    + RonAfterOthersKan()
    + Tsumo()
    + Discard()

}

class mj::Open {
    - bits: int
    + <<get>> type()
    + <<get>> from()
    + <<get>> at()
    + <<get>> size()
    + <<get>> tiles()
    + <<get>> tiles_from_hand()
    + <<get>> stolen_tile()
    + <<get>> last_tile()
    + <<get>> undiscardable_tile_types()
    + <<get>> bits()
}

class mj::Chi <<(S,orange) Static>> {
    + Create(): Open
}

class mj::Pon <<(S,orange) Static>> {
    + Create(): Open
}

class mj::KanOpened <<(S,orange) Static>> {
    + Create(): Open
}

class mj::KanClosed <<(S,orange) Static>> {
    + Create(): Open
}

class mj::KanAdded <<(S,orange) Static>> {
    + Create(): Open
}

class mj::Tile {
    + id
    + type
}


mj::Environment "1" *-- "4" mj::AgentClient
mj::Environment *-- mj::State 

mj::State <-- mj::Action : UpdateStateByAction
mj::State *-- mj::Score 
mj::State *-- mj::Wall
mj::State *-- mj::EventHistory
mj::State "1" *-- "4" mj::Player
mj::State --> mj::Observation : CreateObservation
mj::State --> mj::WinningStateInfo

mj::WinningStateInfo --> mj::Player

mj::Observation --> mj::AgentClient : TakeAction

mj::Player *-- mj::Hand
mj::Player *-- mj::River 
mj::Player --> mj::WinningInfo : ToWinningInfo

mj::Hand "0" *-- "1..4" mj::Open

mj::Open <-- mj::Chi : Create
mj::Open <-- mj::Pon : Create
mj::Open <-- mj::KanClosed : Create
mj::Open <-- mj::KanOpened : Create
mj::Open <-- mj::KanAdded : Create

mj::WinningInfo --> mj::YakuEvaluator : Has, Eval

mj::YakuEvaluator -- mj::WinningHandCache
mj::YakuEvaluator --> mj::WinningScore : Eval

mj::WinningScore --> mj::Player

mj::AgentClient --> mj::AgentServer : <<mjproto::Observation>>
mj::AgentClient --> mj::Action : TakeAction
mj::AgentClient <|-- mj::AgentClientMock

mj::AgentServer --> mj::AgentClient : <<mjproto::Action>>
mj::AgentServer <|-- mj::AgentServerMock


@enduml