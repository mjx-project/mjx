syntax = "proto3";

package mjxproto;

service Agent {
  rpc TakeAction (Observation) returns (Action) {}
}

enum ActionType {
  // After someone's draw
  ACTION_TYPE_DISCARD = 0;
  ACTION_TYPE_TSUMOGIRI = 1;  // ツモ切り, Tsumogiri
  ACTION_TYPE_RIICHI = 2;
  ACTION_TYPE_CLOSED_KAN = 3;  // 暗槓
  ACTION_TYPE_ADDED_KAN = 4;  // 加槓
  ACTION_TYPE_TSUMO = 5;
  ACTION_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;  // 九種九牌
  // After someone's discard
  ACTION_TYPE_CHI = 7;
  ACTION_TYPE_PON = 8;
  ACTION_TYPE_OPEN_KAN = 9;  // 明槓
  ACTION_TYPE_RON = 10;
  ACTION_TYPE_NO = 11;  // Action to ignore chi, pon, open kan, or ron options
}

enum EventType {
  // Publicly observable actions
  EVENT_TYPE_DISCARD = 0;
  EVENT_TYPE_TSUMOGIRI = 1;  // ツモ切り, Tsumogiri
  EVENT_TYPE_RIICHI = 2;
  EVENT_TYPE_CLOSED_KAN = 3;
  EVENT_TYPE_ADDED_KAN = 4;
  EVENT_TYPE_TSUMO = 5;
  //EVENT_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;
  EVENT_TYPE_CHI = 7;
  EVENT_TYPE_PON = 8;
  EVENT_TYPE_OPEN_KAN = 9;
  EVENT_TYPE_RON = 10;
  // State transitions made by environment. There is no decision making by players.
  // 11 is skipped for the consistency to ActionType
  EVENT_TYPE_DRAW = 12;
  EVENT_TYPE_RIICHI_SCORE_CHANGE = 13;
  EVENT_TYPE_NEW_DORA = 14;
  EVENT_TYPE_NO_WINNER = 15;  // 流局 TODO: remove
  EVENT_TYPE_ROUND_END = 21;
}

message Score {
  uint32 round = 1;
  uint32 honba = 2;
  uint32 riichi = 3;  // For final score, riichi = 0 if someone wins (or at the end of game)
  repeated int32 tens = 4;  // Following rule holds for all rounds: sum(score.ten) + score.riichi * 1000 == 100000
}

message Event {
  //                       who    tile   open   round_end
  // DISCARD               Yes    Yes    No     No
  // TSUMOGIRI             Yes    Yes    No     No
  // RIICHI                Yes    No     No     No
  // CLOSED_KAN            Yes    No     Yes    No
  // ADDED_KAN             Yes    No     Yes    No
  // TSUMO                 Yes    Yes    No     No      TODO: remove
  // CHI                   Yes    No     Yes    No
  // PON                   Yes    No     Yes    No
  // OPEN_KAN              Yes    No     Yes    No
  // RON                   Yes    Yes    No     No      TODO: remove
  // DRAW                  Yes    No     No     No      Tile is No since it's private info. EventHistory will be passed to Observation as public info.
  // RIICHI_SCORE_CHANGE   Yes    No     No     No
  // NEW_DORA              No     Yes    No     No
  // NO_WINNER             No     No     No     No      TODO: remove
  // ROUND_END             No     No     No     Yes     TODO: implement
  EventType type = 1;
  int32 who = 2;
  uint32 tile = 3;
  uint32 open = 4;
  RoundEnd round_end = 5;
}

message RoundEnd {
  RoundEndType type = 1;
  repeated Hand shown_hands = 2;  // hands of winners or tenpai players
  repeated int32 ura_dora_indicators = 3;  // set even if no player declared riichi
}

message EventHistory {
  repeated Event events = 2;
}

message PublicObservation {
  Score init_score = 1;
  uint64 init_dora_indicator = 2;
  EventHistory event_history = 3;
  PublicObservationUtils utils = 4;
}

message PublicObservationUtils {
  uint64 game_id = 1;
  repeated string player_ids = 2;
  Score curr_score = 3;
  repeated uint32 curr_dora_indicators = 4;
  RoundEndDetails round_end_details = 7;
}

message RoundEndDetails {
  RoundEndType type = 1;
  Score final_score = 2;
  repeated Win wins = 3;   // Empty if no one wins
  Draw draw = 4;  // draw.tenpai_hands is empty if any winner exists
  bool is_game_over = 5;
}

enum RoundEndType {
  ROUND_END_TYPE_NORMAL = 0;
  ROUND_END_TYPE_TSUMO = 5;
  ROUND_END_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;
  ROUND_END_TYPE_RON = 10;
  ROUND_END_TYPE_ABORTIVE_DRAW_FOUR_RIICHIS = 15;  // 四家立直
  ROUND_END_TYPE_ABORTIVE_DRAW_THREE_RONS = 16;  // 三家和了
  ROUND_END_TYPE_ABORTIVE_DRAW_FOUR_KANS = 17;  // 四槓散了
  ROUND_END_TYPE_ABORTIVE_DRAW_FOUR_WINDS = 18;  // 四風連打
  ROUND_END_TYPE_EXHAUSTIVE_DRAW_NORMAL = 19;  // 通常流局
  ROUND_END_TYPE_EXHAUSTIVE_DRAW_NAGASHI_MANGAN = 20;  // 流し満貫
}

message Draw {
  repeated Hand tenpais = 1; // idx of tenpai players
  repeated int32 ten_changes = 2;  // Required only for Tenhou mjlog.  TODO: check definition. remove
}

message Hand {
  int32 who = 1;
  repeated int32 closed_tiles = 2;
  repeated int32 opens = 3;
}

message PrivateObservation {
  int32 who = 1;
  repeated uint32 init_hand = 2;
  repeated uint32 draw_history = 3;
}

message Observation {
  int32 who = 1;
  PublicObservation public_observation = 2;
  PrivateObservation private_observation = 6;
  repeated Action possible_actions = 7;
}

message Win {
  int32 who = 1;
  int32 from_who = 2;
  repeated uint32 closed_tiles = 3;
  repeated uint32 opens = 4;
  uint32 win_tile = 5;
  uint32 fu = 6;
  uint32 ten = 7;
  repeated int32 ten_changes = 8;  // Required for Tenhou mjlog.
  repeated uint32 yakus = 9;
  repeated uint32 fans = 10;
  repeated uint32 yakumans = 11;
}

message State {
  HiddenState hidden_state = 1;  // Information no one can access
  PublicObservation public_observation = 2;  // Information any player can observe
  repeated PrivateObservation private_observations = 3;  // Information only the corresponding player can access. size is 4.
}

message HiddenState {
  // 136 tiles, indexed [0, ..., 135]
  // - [0, ..., 51] (13*4=52): initial hands (depend on round info)
  // - [52, ..., 121] (70): draws
  // - [122, 124, 126, 128] Kan dora indicators 3, 2, 1, 0
  // - [123, 125, 127, 129] Kan ura Dora indicators 3, 2, 1, 0
  // - [130] Dora indicator
  // - [131] Ura dora indicator
  // - [132, ..., 135]  Kan draw 2, 3, 0, 1
  repeated uint32 wall = 1;
  HiddenStateUtils utils = 2;
}

message HiddenStateUtils {
  uint64 game_seed = 1;
  repeated uint32 curr_ura_dora_indicators = 2;
}

message Action {
  //                discard   open
  //  DISCARD           Yes     No
  //  TSUMOGIRI         Yes     No
  //  RIICHI             No     No
  //  TSUMO              No     No
  //  KAN_CLOSED         No    Yes
  //  KAN_ADDED          No    Yes
  //  KYUSYU             No     No
  //  NO                 No     No
  //  CHI                No    Yes
  //  PON                No    Yes
  //  KAN_OPENED         No    Yes
  //  RON                No     No
  uint32 game_id = 1;
  int32 who = 2;
  ActionType type = 3;
  uint32 discard = 4;
  uint32 open = 5;
}
