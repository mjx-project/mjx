syntax = "proto3";

package mjxproto;

service Agent {
  rpc TakeAction (Observation) returns (Action) {}
}

enum Wind {
  WIND_EAST = 0;
  WIND_SOUTH = 1;
  WIND_WEST = 2;
  WIND_NORTH = 3;
}

enum AbsolutePos {
  ABSOLUTE_POS_INIT_EAST = 0;  // 起家
  ABSOLUTE_POS_INIT_SOUTH = 1;
  ABSOLUTE_POS_INIT_WEST = 2;
  ABSOLUTE_POS_INIT_NORTH = 3;  // ラス親
}

enum RelativePos {
  RELATIVE_POS_SELF = 0;
  RELATIVE_POS_RIGHT = 1;  // 下家
  RELATIVE_POS_MID = 2;    // 対面
  RELATIVE_POS_LEFT = 3;   // 上家
}

enum ActionType {
  // After draw
  ACTION_TYPE_DISCARD = 0;
  ACTION_TYPE_TSUMOGIRI = 1;
  ACTION_TYPE_RIICHI = 2;
  ACTION_TYPE_TSUMO = 3;
  ACTION_TYPE_KAN_CLOSED = 4;
  ACTION_TYPE_KAN_ADDED = 5;
  ACTION_TYPE_KYUSYU = 6;
  // After other's discard
  ACTION_TYPE_NO = 7;
  ACTION_TYPE_CHI = 8;
  ACTION_TYPE_PON = 9;
  ACTION_TYPE_KAN_OPENED = 10;
  ACTION_TYPE_RON = 11;
}

enum EventType {
  EVENT_TYPE_DRAW = 0;
  EVENT_TYPE_DISCARD_FROM_HAND = 1;
  EVENT_TYPE_DISCARD_DRAWN_TILE = 2;  // ツモ切り, Tsumogiri
  EVENT_TYPE_RIICHI = 3;
  EVENT_TYPE_TSUMO = 4;
  EVENT_TYPE_RON = 5;
  EVENT_TYPE_CHI = 6;
  EVENT_TYPE_PON = 7;
  EVENT_TYPE_KAN_CLOSED = 8;
  EVENT_TYPE_KAN_OPENED = 9;
  EVENT_TYPE_KAN_ADDED = 10;
  EVENT_TYPE_NEW_DORA = 11;
  EVENT_TYPE_RIICHI_SCORE_CHANGE = 12;
  EVENT_TYPE_NO_WINNER = 13;  // 流局
}

enum NoWinnerType {  // 流局
  NO_WINNER_TYPE_NORMAL = 0;
  NO_WINNER_TYPE_KYUUSYU = 1; // 九種九牌  // TODO(sotetsuk): rename
  NO_WINNER_TYPE_FOUR_RIICHI = 2;  // 四家立直
  NO_WINNER_TYPE_THREE_RONS = 3;  // 三家和了
  NO_WINNER_TYPE_FOUR_KANS = 4;  // 四槓散了
  NO_WINNER_TYPE_FOUR_WINDS = 5;  // 四風連打
  NO_WINNER_TYPE_NM = 6;  // 流し満貫  # TODO(sotetsuk): rename
}

message Score {
  uint32 round = 1;
  uint32 honba = 2;
  uint32 riichi = 3;  // For final score, riichi = 0 if someone wins (or at the end of game)
  repeated int32 tens = 4;  // Following rule holds for all rounds: sum(score.ten) + score.riichi * 1000 == 100000
}

message Event {
  //                       who    tile    open
  // DRAW                  Yes    No      No      Tile is No since it's private info. EventHistory will be passed to Observation as public info.
  // DISCARD_FROM_HAND     Yes    Yes     No
  // DISCARD_DRAWN_TILE    Yes    Yes     No
  // RIICHI                Yes    No      No
  // TSUMO                 Yes    Yes     No
  // RON                   Yes    Yes     No
  // CHI                   Yes    No      Yes
  // PON                   Yes    No      Yes
  // KAN_CLOSED            Yes    No      Yes
  // KAN_OPENED            Yes    No      Yes
  // KAN_ADDED             Yes    No      Yes
  // NEW_DORA              No     Yes     No
  // RIICHI_SCORE_CHANGE   Yes    No      No
  // NO_WINNER             No     No      No
  EventType type = 1;
  AbsolutePos who = 2;
  uint32 tile = 3;
  uint32 open = 4;
}

message EventHistory {
  repeated Event events = 2;
}

message PrivateInfo {
  AbsolutePos who = 1;
  repeated uint32 init_hand = 2;
  repeated uint32 draws = 3;
}

message Observation {
  repeated string player_ids = 1;
  Score init_score = 2;  // public info
  repeated uint32 doras = 3;
  EventHistory event_history = 4;  // public info
  AbsolutePos who = 5;
  PrivateInfo private_info = 6;
  repeated Action possible_actions = 7;
}

message Win {
  AbsolutePos who = 1;
  AbsolutePos from_who = 2;
  repeated uint32 closed_tiles = 3;
  repeated uint32 opens = 4;
  uint32 win_tile = 5;
  uint32 fu = 6;
  uint32 ten = 7;
  repeated int32 ten_changes = 8;  // Required for Tenhou mjlog.
  repeated uint32 yakus = 9;
  repeated uint32 fans = 10;
  repeated uint32 yakumans = 11;
}

message NoWinner {
  repeated TenpaiHand tenpais = 1;
  repeated int32 ten_changes = 2;  // Required for Tenhou mjlog.
  NoWinnerType type = 3;  // Following Tenhou mjlog format. 0, normal. 九種九牌, 四家立直, 三家和了, 四槓散了, 四風連打, 流し満貫
}

message TenpaiHand {
  AbsolutePos who = 1;
  repeated uint32 closed_tiles = 2;
}

message Terminal {
  Score final_score = 1;
  repeated Win wins = 2;   // Empty if no one wins
  NoWinner no_winner = 3;  // Empty if a winner exists
  bool is_game_over = 4;
}

message State {
  // public info
  repeated string player_ids = 1;
  Score init_score = 2;  // Required for Tenhou mjlog.
  repeated uint32 doras = 3;
  EventHistory event_history = 4;
  // private info
  repeated uint32 wall = 5;
  repeated uint32 ura_doras = 6;
  repeated PrivateInfo private_infos = 7;
  uint64 game_seed = 8;
  // win/ryuukyoku information
  Terminal terminal = 9;
}

message Action {
  //                discard   open
  //  DISCARD           Yes     No
  //  RIICHI             No     No
  //  TSUMO              No     No
  //  KAN_CLOSED         No    Yes
  //  KAN_ADDED          No    Yes
  //  KYUSYU             No     No
  //  NO                 No     No
  //  CHI                No    Yes
  //  PON                No    Yes
  //  KAN_OPENED         No    Yes
  //  RON                No     No
  uint32 game_id = 1;
  AbsolutePos who = 2;
  ActionType type = 3;
  uint32 discard = 4;
  uint32 open = 5;
}
