syntax = "proto3";

package mjxproto;

service Agent {
  rpc TakeAction (Observation) returns (Action) {}
}

enum ActionType {
  // After draw
  ACTION_TYPE_DISCARD = 0;
  ACTION_TYPE_TSUMOGIRI = 1;
  ACTION_TYPE_RIICHI = 2;
  ACTION_TYPE_CLOSED_KAN = 3;
  ACTION_TYPE_ADDED_KAN = 4;
  ACTION_TYPE_TSUMO = 5;
  ACTION_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;  // 九種九牌
  // After other's discard
  ACTION_TYPE_CHI = 7;
  ACTION_TYPE_PON = 8;
  ACTION_TYPE_OPEN_KAN = 9;
  ACTION_TYPE_RON = 10;
  ACTION_TYPE_NO = 11;
}

enum EventType {
  // Publicly observable actions
  EVENT_TYPE_DISCARD = 0;
  EVENT_TYPE_TSUMOGIRI = 1;  // ツモ切り, Tsumogiri
  EVENT_TYPE_RIICHI = 2;
  EVENT_TYPE_CLOSED_KAN = 3;
  EVENT_TYPE_ADDED_KAN = 4;
  EVENT_TYPE_TSUMO = 5;
  EVENT_TYPE_ABORTIVE_DRAW_NINE_TERMINALS = 6;
  EVENT_TYPE_CHI = 7;
  EVENT_TYPE_PON = 8;
  EVENT_TYPE_OPEN_KAN = 9;
  EVENT_TYPE_RON = 10;
  // State transitions made by environment. There is no decision making by players.
  // 11 is skipped for the consistency to ActionType
  EVENT_TYPE_DRAW = 12;
  EVENT_TYPE_NEW_DORA = 13;
  EVENT_TYPE_RIICHI_SCORE_CHANGE = 14;
  EVENT_TYPE_ABORTIVE_DRAW_FOUR_RIICHIS = 15;  // 四家立直
  EVENT_TYPE_ABORTIVE_DRAW_THREE_RONS = 16;  // 三家和了
  EVENT_TYPE_ABORTIVE_DRAW_FOUR_KANS = 17;  // 四槓散了
  EVENT_TYPE_ABORTIVE_DRAW_FOUR_WINDS = 18;  // 四風連打
  EVENT_TYPE_EXHAUSTIVE_DRAW_NORMAL = 19;  // 通常流局
  EVENT_TYPE_EXHAUSTIVE_DRAW_NAGASHI_MANGAN = 20;  // 流し満貫
}

message Score {
  uint32 round = 1;
  uint32 honba = 2;
  uint32 riichi = 3;  // For final score, riichi = 0 if someone wins (or at the end of game)
  repeated int32 tens = 4;  // Following rule holds for all rounds: sum(score.ten) + score.riichi * 1000 == 100000
}

message Event {
  // Publicly observable event, which include
  // 
  //   1. publicly observable and actually realized actions taken by all layers 
  //   2. publicly observable state transitions made by envionment
  // 
  // Note that "No" action is **NOT** collected as event since it's not publicly observable.
  // Also, "Chi" prevented by other player's "Pon/Ron" is also **NOT** collected in event_history.
  // Drawn tile does not use tile entry because it's not publicly observable. 
  // Only the fact that the player drew something is collected.
  //
  // Table. Is who/tile/open entry set?
  //                                    who    tile    open
  //  0. DISCARD                        Yes     Yes      No
  //  1. TSUMOGIRI                      Yes     Yes      No
  //  2. RIICHI                         Yes      No      No
  //  3. CLOSED_KAN                     Yes      No     Yes
  //  4. ADDED_KAN                      Yes      No     Yes
  //  5. TSUMO                          Yes     Yes      No
  //  6. ABORTIVE_DRAW_NINE_TERMINALS   Yes      No      No
  //  7. CHI                            Yes      No     Yes
  //  8. PON                            Yes      No     Yes
  //  9. OPEN_KAN                       Yes      No     Yes
  // 10. RON                            Yes     Yes      No
  // 12. DRAW                           Yes      No      No
  // 13. RIICHI_SCORE_CHANGE            Yes      No      No
  // 14. NEW_DORA                        No     Yes      No
  // 16. ABORTIVE_DRAW_FOUR_RIICHIS      No      No      No
  // 17. ABORTIVE_DRAW_THREE_RONS        NO      NO      NO
  // 18. ABORTIVE_DRAW_FOUR_KANS         No      No      No
  // 19. ABORTIVE_DRAW_FOUR_WINDS        No      No      No
  // 15. EXHAUSTIVE_DRAW_NORMAL          No      No      No
  // 20. EXHAUSTIVE_DRAW_NAGASHI_MANGAN  No      No      No
  EventType type = 1;
  int32 who = 2;
  uint32 tile = 3;
  uint32 open = 4;
}

message PublicObservation {
  repeated string player_ids = 1;
  Score init_score = 2;  // public info
  repeated uint32 doras = 3;
  repeated Event events = 4;
}

message Hand {
  repeated uint32 closed_tiles = 1;
  repeated uint32 opens = 2;
}

message PrivateObservation {
  int32 who = 1;
  Hand init_hand = 2;
  repeated uint32 draws = 3;
  Hand curr_hand = 4;
}

message Observation {
  PublicObservation public_observation = 4;  // public info
  int32 who = 5;
  PrivateObservation private_observation = 6;
  repeated Action possible_actions = 7;
}

message Win {
  int32 who = 1;
  int32 from_who = 2;
  repeated uint32 closed_tiles = 3;
  repeated uint32 opens = 4;
  uint32 win_tile = 5;
  uint32 fu = 6;
  uint32 ten = 7;
  repeated int32 ten_changes = 8;  // Required for Tenhou mjlog.
  repeated uint32 yakus = 9;
  repeated uint32 fans = 10;
  repeated uint32 yakumans = 11;
}

message NoWinner {
  repeated TenpaiHand tenpais = 1;
  repeated int32 ten_changes = 2;  // Required for Tenhou mjlog.
}

message TenpaiHand {
  int32 who = 1;
  repeated uint32 closed_tiles = 2;
}

message Terminal {
  Score final_score = 1;
  repeated Win wins = 2;   // Empty if no one wins
  NoWinner no_winner = 3;  // Empty if a winner exists
  bool is_game_over = 4;
}

message HiddenState {
  uint64 game_seed = 1;
  repeated uint32 wall = 2;
  repeated uint32 ura_doras = 3;
}

message State {
  // public info
  HiddenState hidden_state = 2;
  PublicObservation public_observation = 4;
  // private info
  repeated PrivateObservation private_observations = 7;
  // win/ryuukyoku information
  Terminal terminal = 9;
}

message Action {
  //                discard   open
  //  DISCARD           Yes     No
  //  RIICHI             No     No
  //  TSUMO              No     No
  //  CLOSED_KAN         No    Yes
  //  ADDED_KAN          No    Yes
  //  KYUSYU             No     No
  //  NO                 No     No
  //  CHI                No    Yes
  //  PON                No    Yes
  //  OPEN_KAN         No    Yes
  //  RON                No     No
  uint32 game_id = 1;
  int32 who = 2;
  ActionType type = 3;
  uint32 discard = 4;
  uint32 open = 5;
}
